% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/documentation.R
\name{predict_new}
\alias{predict_new}
\title{Generate Predictions for New Data Using a Logistic Regression Model}
\usage{
predict_new(data, model, threshold = 0.5)
}
\arguments{
\item{data}{A data frame containing the new data to make predictions on. The dataset should contain
all predictors specified in the model.}

\item{model}{A list representing the logistic regression model. It must contain a component named
\code{beta_optimized}, which is a column matrix containing the model's coefficients, including the intercept.}

\item{threshold}{A numeric value between 0 and 1. This value is used as the decision threshold for classifying
outcomes as 0 or 1. The default value is 0.5.}
}
\value{
A data frame containing the original data along with an additional column named \code{predicted}, which
  holds the predicted class labels (0 or 1).
}
\description{
This function generates predictions for new data based on an input logistic regression model fitted using function \code{lr}.
The model is should include a list that contains an optimized set of coefficients (betas).
Predictions are based on a logistic regression model using a specified threshold to classify outcomes.
}
\examples{
# Example 1: Using the mtcars dataset with 'am' as the binomial dependent variable.

# For this example we will create a model object using function \code{lr} using the training data, and variable 'am' as the dependent variable.
data(mtcars)
model<-lr(am~hp+mpg+wt, data=mtcars, B=50, alpha=0.05)

# For this example we will generate random data for variables 'hp', 'mpg', and 'wt'.
n<-10
hp<-round(runif(n, min(mtcars$hp), max(mtcars$hp)),1)
mpg<-round(runif(n, min(mtcars$mpg), max(mtcars$mpg)),1)
wt<-round(runif(n, min(mtcars$wt), max(mtcars$wt)),1)

new_data<-data.frame(
  hp=hp,
  wt=wt,
  mpg=mpg)

#Now we use the function to predict the outcome
new_predictions<-predict_new(data=new_data, model=model, threshold=0.5)
head(new_predictions)

# Example 2: Predicting outcomes on a binary subset of the Iris dataset
data(iris)
iris_binary <- iris[iris$Species \%in\% c("setosa", "versicolor"), ]
iris_binary$Species <- factor(iris_binary$Species)

# Fit a logistic regression model using function \code{lr}
model <- lr(Species ~ Sepal.Length + Sepal.Width, data = iris_binary)

# For this example we will generate new random data for variables 'Sepal.Length' and 'Sepal.Width'.
n<-10
Sepal.Length<-round(runif(n, min(iris_binary$Sepal.Length), max(iris_binary$Sepal.Length)), 1)
Sepal.Width<-round(runif(n, min(iris_binary$Sepal.Width), max(iris_binary$Sepal.Width)), 1)
new_data<-data.frame(
  Sepal.Length=Sepal.Length,
  Sepal.Width=Sepal.Width)

# Predict outcomes on new data
predictions <- predict_new(data = new_data, model = model, threshold=0.5)
head(predictions)

}
\seealso{
\code{\link[TrainPredict]{lr}}, \code{\link[TrainPredict]{train_test_sample}}, \code{\link[TrainPredict]{predict_test}}
}
