% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/documentation.R
\name{train_test_sampling}
\alias{train_test_sampling}
\title{Train-Test Sampling Function}
\usage{
train_test_sampling(
  data,
  dependent_var,
  train_prop = 0.75,
  return_data = FALSE,
  seed = NULL
)
}
\arguments{
\item{data}{A data frame containing the data to be split. The data should have no missing values in the rows intended for modeling.}

\item{dependent_var}{A character string or numeric value indicating the name or column index of the dependent (target) variable in `data`. The dependent variable must be binomial (i.e., it should have exactly two unique levels).}

\item{train_prop}{A numeric value between 0 and 1 indicating the proportion of the data to include in the training set. The default value is 0.75.}

\item{return_data}{A logical value indicating whether to return the actual training and test datasets (`TRUE`) or just the training indices (`FALSE`). Default is `FALSE`.}

\item{seed}{An optional integer to set the random seed for reproducibility.}
}
\value{
Depending on the value of `return_data`, the function returns:
	- If `return_data = FALSE`: A vector of indices for the rows in the training set.
	- If `return_data = TRUE`: A list with two elements:
	  	- `train`: A data frame containing the training set.
	  	- `test`: A data frame containing the test set.
}
\description{
This function splits a data set into training and test sets based on a specified proportion of training data, while ensuring that the split maintains the class distribution of a binomial dependent variable.
}
\details{
The function first removes any incomplete cases from the data and then checks whether the dependent variable is binomial. It then proceeds to split the data into training and test sets based on the specified proportion (`train_prop`). If `return_data = TRUE`, the function returns a list containing the training and test datasets. Otherwise, it returns only the indices of the rows assigned to the training set.
}
\examples{
# Example 1: Using the mtcars dataset with 'am' as the binomial dependent variable.
# Split the data, using 75\% of the data for training, and return the train and test datasets.

split_data <- train_test_sampling(mtcars, dependent_var = 'am', train_prop = 0.75, return_data = TRUE, seed = 123)

#To obtain the training data set can be found in an element called \code{train}
head(split_data$train)
dim(split_data$train)

#The test data set is stored in an element called \code{test}
head(split_data$test)
dim(split_data$test)

# Get the training indices only
train_indices <- train_test_sampling(mtcars, dependent_var = 'am', train_prop = 0.75, return_data = FALSE, seed = 123)

# Example 2: Splitting the Iris dataset (binary classification case)
data(iris)
iris_binary <- iris[iris$Species \%in\% c("setosa", "versicolor"), ]
iris_binary$Species <- factor(iris_binary$Species)

# Get indices for the training set
train_indices <- train_test_sampling(data = iris_binary, dependent_var = "Species", train_prop = 0.8)
head(train_indices)

# Split data into training and testing sets
split_data <- train_test_sampling(data = iris_binary, dependent_var = "Species", train_prop = 0.8, return_data = TRUE)
head(split_data$train)
head(split_data$test)

}
\seealso{
\code{\link{sample}}, \code{\link{set.seed}}
}
